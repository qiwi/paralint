// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runs with --format html 1`] = `"format html is not supported yet"`;

exports[`runs with --format json and --output-file eslint.json 1`] = `
Array [
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/cli.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 4,
        "endColumn": 9,
        "endLine": 7,
        "line": 7,
        "message": "Prefer top-level await over using a promise chain.",
        "messageId": "promise",
        "nodeType": "Identifier",
        "ruleId": "unicorn/prefer-top-level-await",
        "severity": 1,
      },
    ],
    "source": "#!/usr/bin/env node

import { main } from './index'

main(process.argv.slice(2))
  .then(() => process.exit(0))
  .catch(() => process.exit(1))
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 1,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 24,
        "endColumn": 27,
        "endLine": 17,
        "line": 17,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                459,
                462,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                459,
                462,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 24,
        "endColumn": 27,
        "endLine": 82,
        "line": 82,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                1857,
                1860,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                1857,
                1860,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
    ],
    "source": "import spawn from '@npmcli/promise-spawn'
import dargs from 'dargs'
import fg from 'fast-glob'
import minimist from 'minimist'
import { statSync, writeFileSync } from 'node:fs'
import { cpus } from 'node:os'

type ParaLintArgs = {
  entries: string[]
  ignorePattern: string | string[]
  help: boolean
  version: boolean
  extension: string | string[]
  format: 'stylish' | 'compact' | 'json'
  outputFile: string
  concurrency: number
  argv: Record<string, any>
}

export type ParaLintResult = {
  stdout: string
  stderr: string
}

const cpusLength = cpus().length

const defaultExtension = ['js', 'ts', 'cjs', 'mjs', 'jsx', 'tsx']

const defaultIgnorePattern = ['node_modules']

const compatibleFormats = [
  'stylish',
  'compact',
  'json',
] as ParaLintArgs['format'][]

const isDirectory: (path: string) => boolean = (path) => {
  try {
    return statSync(path).isDirectory()
  } catch {
    return false
  }
}

const getExtensions: (extension: ParaLintArgs['extension']) => string = (
  extension,
) => {
  return \`.(\${(Array.isArray(extension) ? extension : [extension])
    .reduce<string[]>(
      (extensions, extension) => [...extensions, ...extension.split(',')],
      [],
    )
    .map((extension) => extension.replace(/^\\\\./, ''))
    .join('|')})\`
}

const getFiles: (args: ParaLintArgs) => string[] = ({
  entries,
  extension,
  ignorePattern,
}) => {
  const extensions = getExtensions(extension)
  const patterns = entries.reduce<string[]>(
    (entries, entry) => [
      ...entries,
      isDirectory(entry) ? \`\${entry}/**/*\${extensions}\` : entry,
    ],
    [],
  )
  return fg.sync(patterns, {
    onlyFiles: true,
    ignore: [
      ...defaultIgnorePattern,
      ...(Array.isArray(ignorePattern) ? ignorePattern : [ignorePattern]),
    ],
  })
}

const getResults: (
  files: string[],
  forks: number,
  argv: Record<string, any>,
) => Promise<PromiseSettledResult<Awaited<ParaLintResult>>[]> = async (
  files,
  forks,
  argv,
) => {
  const eslints = []
  const offset = files.length / forks
  for (let f = 0; f < files.length; f += offset) {
    eslints.push(
      spawn('eslint', [...files.slice(f, f + offset), ...dargs(argv)]),
    )
  }
  return Promise.allSettled<ParaLintResult>(eslints)
}

const getFormatted: (
  results: PromiseSettledResult<Awaited<ParaLintResult>>[],
  format: ParaLintArgs['format'],
) => string = (results, format) => {
  const outs = results
    .map((result) =>
      result.status === 'fulfilled'
        ? result.value.stdout
        : result.reason.stdout,
    )
    .filter(Boolean)
    .sort()
  if (format === 'json') {
    return \`[\${outs
      .map((out) => out.slice(1, -1))
      .filter(Boolean)
      .join(',')}]\`
  }
  return outs.join('\\\\n')
}

const getArgs: (args: string[]) => ParaLintArgs = (args) => {
  const {
    _: entries,
    'ignore-pattern': ignorePattern = [],
    h,
    help = h,
    v,
    version = v,
    ext: extension = defaultExtension,
    f = 'stylish',
    format = f,
    o,
    'output-file': outputFile = o,
    concurrency = cpusLength / 2,
    ...argv
  } = minimist(args)
  return {
    entries,
    ignorePattern,
    help,
    version,
    extension,
    format,
    outputFile,
    concurrency,
    argv,
  }
}

const lint: (args: ParaLintArgs) => Promise<void> = async (args) => {
  const { format, outputFile, concurrency, argv } = args
  const files = getFiles(args)
  const results = await getResults(
    files,
    Math.min(Math.max(1, concurrency | 0), cpusLength),
    { ...argv, format },
  )
  const formatted = getFormatted(results, format)
  if (outputFile) {
    writeFileSync(outputFile, formatted)
  } else if (formatted) {
    console.log(formatted)
  }
  if (results.every(({ status }) => status === 'fulfilled')) {
    return
  }

  const err = results.find(({status}) => status === 'rejected') as PromiseRejectedResult
  throw new Error(err?.reason)
}

export const main: (argv: string[]) => Promise<void> = async (argv) => {
  const args = getArgs(argv)
  const { help, version, format } = args
  if (help || version) {
    const res = await spawn('eslint', dargs({ version, help }))
    console.log(res.stdout)
    return
  }
  if (!compatibleFormats.includes(format)) {
    const msg = \`format \${format} is not supported yet\`
    console.error(msg)
    throw new Error(msg)
  }
  return lint(args)
}
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 2,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/test/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 0,
  },
]
`;

exports[`runs with --help 1`] = `
"eslint [options] file.js [file.js] [dir]

Basic configuration:
  --no-eslintrc                   Disable use of configuration from .eslintrc.*
  -c, --config path::String       Use this configuration, overriding .eslintrc.* config options if present
  --env [String]                  Specify environments
  --ext [String]                  Specify JavaScript file extensions
  --global [String]               Define global variables
  --parser String                 Specify the parser to be used
  --parser-options Object         Specify parser options
  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default

Specifying rules and plugins:
  --plugin [String]               Specify plugins
  --rule Object                   Specify rules
  --rulesdir [path::String]       Load additional rules from this directory. Deprecated: Use rules from plugins

Fixing problems:
  --fix                           Automatically fix problems
  --fix-dry-run                   Automatically fix problems without saving the changes to the file system
  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)

Ignoring files:
  --ignore-path path::String      Specify path of ignore file
  --no-ignore                     Disable use of ignore files and patterns
  --ignore-pattern [String]       Pattern of files to ignore (in addition to those in .eslintignore)

Using stdin:
  --stdin                         Lint code provided on <STDIN> - default: false
  --stdin-filename String         Specify filename to process STDIN as

Handling warnings:
  --quiet                         Report errors only - default: false
  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1

Output:
  -o, --output-file path::String  Specify file to write report to
  -f, --format String             Use a specific output format - default: stylish
  --color, --no-color             Force enabling/disabling of color

Inline configuration comments:
  --no-inline-config              Prevent comments from changing config or rules
  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives

Caching:
  --cache                         Only check changed files - default: false
  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache
  --cache-location path::String   Path to the cache file or directory
  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata

Miscellaneous:
  --init                          Run config initialization wizard - default: false
  --env-info                      Output execution environment information - default: false
  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched
  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false
  --debug                         Output debugging information
  -h, --help                      Show help
  -v, --version                   Output the version number
  --print-config path::String     Print the configuration for the given file"
`;

exports[`runs with --version 1`] = `"v8.29.0"`;

exports[`runs with -f html 1`] = `"format html is not supported yet"`;

exports[`runs with -f json 1`] = `
Array [
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/cli.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 4,
        "endColumn": 9,
        "endLine": 7,
        "line": 7,
        "message": "Prefer top-level await over using a promise chain.",
        "messageId": "promise",
        "nodeType": "Identifier",
        "ruleId": "unicorn/prefer-top-level-await",
        "severity": 1,
      },
    ],
    "source": "#!/usr/bin/env node

import { main } from './index'

main(process.argv.slice(2))
  .then(() => process.exit(0))
  .catch(() => process.exit(1))
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 1,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 24,
        "endColumn": 27,
        "endLine": 17,
        "line": 17,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                459,
                462,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                459,
                462,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      Object {
        "column": 24,
        "endColumn": 27,
        "endLine": 82,
        "line": 82,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "suggestions": Array [
          Object {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": Object {
              "range": Array [
                1857,
                1860,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          Object {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": Object {
              "range": Array [
                1857,
                1860,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
    ],
    "source": "import spawn from '@npmcli/promise-spawn'
import dargs from 'dargs'
import fg from 'fast-glob'
import minimist from 'minimist'
import { statSync, writeFileSync } from 'node:fs'
import { cpus } from 'node:os'

type ParaLintArgs = {
  entries: string[]
  ignorePattern: string | string[]
  help: boolean
  version: boolean
  extension: string | string[]
  format: 'stylish' | 'compact' | 'json'
  outputFile: string
  concurrency: number
  argv: Record<string, any>
}

export type ParaLintResult = {
  stdout: string
  stderr: string
}

const cpusLength = cpus().length

const defaultExtension = ['js', 'ts', 'cjs', 'mjs', 'jsx', 'tsx']

const defaultIgnorePattern = ['node_modules']

const compatibleFormats = [
  'stylish',
  'compact',
  'json',
] as ParaLintArgs['format'][]

const isDirectory: (path: string) => boolean = (path) => {
  try {
    return statSync(path).isDirectory()
  } catch {
    return false
  }
}

const getExtensions: (extension: ParaLintArgs['extension']) => string = (
  extension,
) => {
  return \`.(\${(Array.isArray(extension) ? extension : [extension])
    .reduce<string[]>(
      (extensions, extension) => [...extensions, ...extension.split(',')],
      [],
    )
    .map((extension) => extension.replace(/^\\\\./, ''))
    .join('|')})\`
}

const getFiles: (args: ParaLintArgs) => string[] = ({
  entries,
  extension,
  ignorePattern,
}) => {
  const extensions = getExtensions(extension)
  const patterns = entries.reduce<string[]>(
    (entries, entry) => [
      ...entries,
      isDirectory(entry) ? \`\${entry}/**/*\${extensions}\` : entry,
    ],
    [],
  )
  return fg.sync(patterns, {
    onlyFiles: true,
    ignore: [
      ...defaultIgnorePattern,
      ...(Array.isArray(ignorePattern) ? ignorePattern : [ignorePattern]),
    ],
  })
}

const getResults: (
  files: string[],
  forks: number,
  argv: Record<string, any>,
) => Promise<PromiseSettledResult<Awaited<ParaLintResult>>[]> = async (
  files,
  forks,
  argv,
) => {
  const eslints = []
  const offset = files.length / forks
  for (let f = 0; f < files.length; f += offset) {
    eslints.push(
      spawn('eslint', [...files.slice(f, f + offset), ...dargs(argv)]),
    )
  }
  return Promise.allSettled<ParaLintResult>(eslints)
}

const getFormatted: (
  results: PromiseSettledResult<Awaited<ParaLintResult>>[],
  format: ParaLintArgs['format'],
) => string = (results, format) => {
  const outs = results
    .map((result) =>
      result.status === 'fulfilled'
        ? result.value.stdout
        : result.reason.stdout,
    )
    .filter(Boolean)
    .sort()
  if (format === 'json') {
    return \`[\${outs
      .map((out) => out.slice(1, -1))
      .filter(Boolean)
      .join(',')}]\`
  }
  return outs.join('\\\\n')
}

const getArgs: (args: string[]) => ParaLintArgs = (args) => {
  const {
    _: entries,
    'ignore-pattern': ignorePattern = [],
    h,
    help = h,
    v,
    version = v,
    ext: extension = defaultExtension,
    f = 'stylish',
    format = f,
    o,
    'output-file': outputFile = o,
    concurrency = cpusLength / 2,
    ...argv
  } = minimist(args)
  return {
    entries,
    ignorePattern,
    help,
    version,
    extension,
    format,
    outputFile,
    concurrency,
    argv,
  }
}

const lint: (args: ParaLintArgs) => Promise<void> = async (args) => {
  const { format, outputFile, concurrency, argv } = args
  const files = getFiles(args)
  const results = await getResults(
    files,
    Math.min(Math.max(1, concurrency | 0), cpusLength),
    { ...argv, format },
  )
  const formatted = getFormatted(results, format)
  if (outputFile) {
    writeFileSync(outputFile, formatted)
  } else if (formatted) {
    console.log(formatted)
  }
  if (results.every(({ status }) => status === 'fulfilled')) {
    return
  }

  const err = results.find(({status}) => status === 'rejected') as PromiseRejectedResult
  throw new Error(err?.reason)
}

export const main: (argv: string[]) => Promise<void> = async (argv) => {
  const args = getArgs(argv)
  const { help, version, format } = args
  if (help || version) {
    const res = await spawn('eslint', dargs({ version, help }))
    console.log(res.stdout)
    return
  }
  if (!compatibleFormats.includes(format)) {
    const msg = \`format \${format} is not supported yet\`
    console.error(msg)
    throw new Error(msg)
  }
  return lint(args)
}
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 2,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/test/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [],
    "warningCount": 0,
  },
]
`;

exports[`runs with -h 1`] = `
"eslint [options] file.js [file.js] [dir]

Basic configuration:
  --no-eslintrc                   Disable use of configuration from .eslintrc.*
  -c, --config path::String       Use this configuration, overriding .eslintrc.* config options if present
  --env [String]                  Specify environments
  --ext [String]                  Specify JavaScript file extensions
  --global [String]               Define global variables
  --parser String                 Specify the parser to be used
  --parser-options Object         Specify parser options
  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default

Specifying rules and plugins:
  --plugin [String]               Specify plugins
  --rule Object                   Specify rules
  --rulesdir [path::String]       Load additional rules from this directory. Deprecated: Use rules from plugins

Fixing problems:
  --fix                           Automatically fix problems
  --fix-dry-run                   Automatically fix problems without saving the changes to the file system
  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)

Ignoring files:
  --ignore-path path::String      Specify path of ignore file
  --no-ignore                     Disable use of ignore files and patterns
  --ignore-pattern [String]       Pattern of files to ignore (in addition to those in .eslintignore)

Using stdin:
  --stdin                         Lint code provided on <STDIN> - default: false
  --stdin-filename String         Specify filename to process STDIN as

Handling warnings:
  --quiet                         Report errors only - default: false
  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1

Output:
  -o, --output-file path::String  Specify file to write report to
  -f, --format String             Use a specific output format - default: stylish
  --color, --no-color             Force enabling/disabling of color

Inline configuration comments:
  --no-inline-config              Prevent comments from changing config or rules
  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives

Caching:
  --cache                         Only check changed files - default: false
  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache
  --cache-location path::String   Path to the cache file or directory
  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata

Miscellaneous:
  --init                          Run config initialization wizard - default: false
  --env-info                      Output execution environment information - default: false
  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched
  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false
  --debug                         Output debugging information
  -h, --help                      Show help
  -v, --version                   Output the version number
  --print-config path::String     Print the configuration for the given file"
`;

exports[`runs with -o eslint.txt 1`] = `
"[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m17:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m82:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[33m[1m✖ 3 problems (0 errors, 3 warnings)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;

exports[`runs with -v 1`] = `"v8.29.0"`;

exports[`runs with directory 1`] = `
"[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m17:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m82:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[33m[1m✖ 3 problems (0 errors, 3 warnings)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;

exports[`runs with directory and ext 1`] = `
"[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m17:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m82:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[33m[1m✖ 3 problems (0 errors, 3 warnings)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;

exports[`runs with file 1`] = `
"[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[33m[1m✖ 1 problem (0 errors, 1 warning)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;

exports[`runs with pattern 1`] = `
"[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m17:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m82:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[33m[1m✖ 3 problems (0 errors, 3 warnings)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;

exports[`runs with pattern root, ext and ignore pattern 1`] = `
"[0m[0m
[0m[4m/extra-types/npmcli__spawn-promise/index.d.ts[24m[0m
[0m  [2m28:28[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m28:33[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m33:28[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m33:33[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[4m/src/main/ts/cli.ts[24m[0m
[0m  [2m7:4[22m  [33mwarning[39m  Prefer top-level await over using a promise chain  [2municorn/prefer-top-level-await[22m[0m
[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m17:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m  [2m82:24[22m  [33mwarning[39m  Unexpected any. Specify a different type  [2m@typescript-eslint/no-explicit-any[22m[0m
[0m[0m
[0m[33m[1m✖ 7 problems (0 errors, 7 warnings)[22m[39m[0m
[0m[33m[1m[22m[39m[0m"
`;
