// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runs with --format html 1`] = `"format html is not supported yet"`;

exports[`runs with --format html 2`] = `"format html is not supported yet"`;

exports[`runs with --format json and --output-file eslint.json 1`] = `
Array [
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/cli.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
  Object {
    "errorCount": 2,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 10,
        "endColumn": 26,
        "endLine": 147,
        "line": 147,
        "message": "Expected the Promise rejection reason to be an Error.",
        "messageId": "rejectAnError",
        "nodeType": "CallExpression",
        "ruleId": "prefer-promise-reject-errors",
        "severity": 2,
      },
      Object {
        "column": 12,
        "endColumn": 28,
        "endLine": 161,
        "line": 161,
        "message": "Expected the Promise rejection reason to be an Error.",
        "messageId": "rejectAnError",
        "nodeType": "CallExpression",
        "ruleId": "prefer-promise-reject-errors",
        "severity": 2,
      },
    ],
    "source": "// @ts-ignore
import spawn from '@npmcli/promise-spawn'
import dargs from 'dargs'
import fg from 'fast-glob'
import minimist from 'minimist'
import { stat, writeFile } from 'node:fs/promises'
import { cpus } from 'node:os'

type ParaLintArgs = {
  entries: string[]
  help: boolean
  version: boolean
  extension: string | string[]
  format: 'stylish' | 'compact' | 'json'
  outputFile: string
  concurrency: number
  argv: Record<string, any>
}

export type ParaLintResult = {
  stdout: string
  stderr: string
}

const cpusLength = cpus().length

const defaultExtension = ['js', 'ts', 'cjs', 'mjs', 'jsx', 'tsx']

const compatibleFormats = [
  'stylish',
  'compact',
  'json',
] as ParaLintArgs['format'][]

const getExtensions: (extension: ParaLintArgs['extension']) => string = (
  extension,
) => {
  return \`.(\${(Array.isArray(extension) ? extension : [extension])
    .reduce(
      (extensions, extension) => [...extensions, ...extension.split(',')],
      [] as string[],
    )
    .map((extension) => extension.replace(/^\\\\./, ''))
    .join('|')})\`
}

const getFiles: ({
  entries,
  extension,
}: ParaLintArgs) => Promise<string[]> = async ({ entries, extension }) => {
  const patterns = await entries.reduce(async (entries, entry) => {
    return [
      ...(await entries),
      !entry.includes('*') && (await stat(entry)).isDirectory()
        ? \`\${entry}/**/*\${getExtensions(extension)}\`
        : entry,
    ]
  }, Promise.resolve([] as string[]))
  return fg(patterns, { onlyFiles: true })
}

const getResults: (
  files: string[],
  forks: number,
  argv: Record<string, any>,
) => Promise<PromiseSettledResult<Awaited<ParaLintResult>>[]> = async (
  files,
  forks,
  argv,
) => {
  const eslints = []
  const offset = files.length / forks
  for (let f = 0; f < files.length; f += offset) {
    eslints.push(
      spawn('eslint', [...files.slice(f, f + offset), ...dargs(argv)]),
    )
  }
  return Promise.allSettled<ParaLintResult>(eslints)
}

const getFormatted: (
  results: PromiseSettledResult<Awaited<ParaLintResult>>[],
  format: ParaLintArgs['format'],
) => string = (results, format) => {
  const outs = results
    .map((result) =>
      result.status === 'fulfilled'
        ? result.value.stdout
        : result.reason.stdout,
    )
    .filter((out) => out)
    .sort()
  if (format === 'json') {
    return \`[\${outs
      .map((out) => out.substring(1, out.length - 1))
      .filter((out) => out)
      .join(',')}]\`
  }
  return outs.join('\\\\n')
}

const getArgs: (args: string[]) => ParaLintArgs = (args) => {
  const {
    _: entries,
    h,
    help = h,
    v,
    version = v,
    ext: extension = defaultExtension,
    f = 'stylish',
    format = f,
    o,
    'output-file': outputFile = o,
    concurrency = cpusLength / 2,
    ...argv
  } = minimist(args)
  return {
    entries,
    help,
    version,
    extension,
    format,
    outputFile,
    concurrency,
    argv,
  }
}

const lint: (args: ParaLintArgs) => Promise<any> = async (args) => {
  const { format, outputFile, concurrency, argv } = args
  const files = await getFiles(args)
  const results = await getResults(
    files,
    Math.min(Math.max(1, concurrency | 0), cpusLength),
    { ...argv, format },
  )
  const formatted = getFormatted(results, format)
  if (outputFile) {
    await writeFile(outputFile, formatted)
  } else if (formatted) {
    console.log(formatted)
  }
  if (results.every(({ status }) => status === 'fulfilled')) {
    return Promise.resolve()
  }
  // eslint-disable-next-line prefer-promise-reject-errors
  return Promise.reject()
}

export const main: (argv: string[]) => Promise<any> = async (argv) => {
  const args = getArgs(argv)
  const { help, version, format } = args
  if (help || version) {
    const res = await spawn('eslint', dargs({ version, help }))
    console.log(res.stdout)
    return Promise.resolve()
  }
  if (!compatibleFormats.includes(format)) {
    console.error(\`format \${format} is not supported yet\`)
    // eslint-disable-next-line prefer-promise-reject-errors
    return Promise.reject()
  }
  return lint(args)
}
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/test/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
]
`;

exports[`runs with --help 1`] = `
"eslint [options] file.js [file.js] [dir]

Basic configuration:
  --no-eslintrc                   Disable use of configuration from .eslintrc.*
  -c, --config path::String       Use this configuration, overriding .eslintrc.* config options if present
  --env [String]                  Specify environments
  --ext [String]                  Specify JavaScript file extensions
  --global [String]               Define global variables
  --parser String                 Specify the parser to be used
  --parser-options Object         Specify parser options
  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default

Specifying rules and plugins:
  --plugin [String]               Specify plugins
  --rule Object                   Specify rules
  --rulesdir [path::String]       Load additional rules from this directory. Deprecated: Use rules from plugins

Fixing problems:
  --fix                           Automatically fix problems
  --fix-dry-run                   Automatically fix problems without saving the changes to the file system
  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)

Ignoring files:
  --ignore-path path::String      Specify path of ignore file
  --no-ignore                     Disable use of ignore files and patterns
  --ignore-pattern [String]       Pattern of files to ignore (in addition to those in .eslintignore)

Using stdin:
  --stdin                         Lint code provided on <STDIN> - default: false
  --stdin-filename String         Specify filename to process STDIN as

Handling warnings:
  --quiet                         Report errors only - default: false
  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1

Output:
  -o, --output-file path::String  Specify file to write report to
  -f, --format String             Use a specific output format - default: stylish
  --color, --no-color             Force enabling/disabling of color

Inline configuration comments:
  --no-inline-config              Prevent comments from changing config or rules
  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives

Caching:
  --cache                         Only check changed files - default: false
  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache
  --cache-location path::String   Path to the cache file or directory
  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata

Miscellaneous:
  --init                          Run config initialization wizard - default: false
  --env-info                      Output execution environment information - default: false
  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched
  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false
  --debug                         Output debugging information
  -h, --help                      Show help
  -v, --version                   Output the version number
  --print-config path::String     Print the configuration for the given file"
`;

exports[`runs with --version 1`] = `"v8.20.0"`;

exports[`runs with -f html 1`] = `"format html is not supported yet"`;

exports[`runs with -f html 2`] = `"format html is not supported yet"`;

exports[`runs with -f json 1`] = `
Array [
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/cli.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
  Object {
    "errorCount": 2,
    "fatalErrorCount": 0,
    "filePath": "/src/main/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [
      Object {
        "column": 10,
        "endColumn": 26,
        "endLine": 147,
        "line": 147,
        "message": "Expected the Promise rejection reason to be an Error.",
        "messageId": "rejectAnError",
        "nodeType": "CallExpression",
        "ruleId": "prefer-promise-reject-errors",
        "severity": 2,
      },
      Object {
        "column": 12,
        "endColumn": 28,
        "endLine": 161,
        "line": 161,
        "message": "Expected the Promise rejection reason to be an Error.",
        "messageId": "rejectAnError",
        "nodeType": "CallExpression",
        "ruleId": "prefer-promise-reject-errors",
        "severity": 2,
      },
    ],
    "source": "// @ts-ignore
import spawn from '@npmcli/promise-spawn'
import dargs from 'dargs'
import fg from 'fast-glob'
import minimist from 'minimist'
import { stat, writeFile } from 'node:fs/promises'
import { cpus } from 'node:os'

type ParaLintArgs = {
  entries: string[]
  help: boolean
  version: boolean
  extension: string | string[]
  format: 'stylish' | 'compact' | 'json'
  outputFile: string
  concurrency: number
  argv: Record<string, any>
}

export type ParaLintResult = {
  stdout: string
  stderr: string
}

const cpusLength = cpus().length

const defaultExtension = ['js', 'ts', 'cjs', 'mjs', 'jsx', 'tsx']

const compatibleFormats = [
  'stylish',
  'compact',
  'json',
] as ParaLintArgs['format'][]

const getExtensions: (extension: ParaLintArgs['extension']) => string = (
  extension,
) => {
  return \`.(\${(Array.isArray(extension) ? extension : [extension])
    .reduce(
      (extensions, extension) => [...extensions, ...extension.split(',')],
      [] as string[],
    )
    .map((extension) => extension.replace(/^\\\\./, ''))
    .join('|')})\`
}

const getFiles: ({
  entries,
  extension,
}: ParaLintArgs) => Promise<string[]> = async ({ entries, extension }) => {
  const patterns = await entries.reduce(async (entries, entry) => {
    return [
      ...(await entries),
      !entry.includes('*') && (await stat(entry)).isDirectory()
        ? \`\${entry}/**/*\${getExtensions(extension)}\`
        : entry,
    ]
  }, Promise.resolve([] as string[]))
  return fg(patterns, { onlyFiles: true })
}

const getResults: (
  files: string[],
  forks: number,
  argv: Record<string, any>,
) => Promise<PromiseSettledResult<Awaited<ParaLintResult>>[]> = async (
  files,
  forks,
  argv,
) => {
  const eslints = []
  const offset = files.length / forks
  for (let f = 0; f < files.length; f += offset) {
    eslints.push(
      spawn('eslint', [...files.slice(f, f + offset), ...dargs(argv)]),
    )
  }
  return Promise.allSettled<ParaLintResult>(eslints)
}

const getFormatted: (
  results: PromiseSettledResult<Awaited<ParaLintResult>>[],
  format: ParaLintArgs['format'],
) => string = (results, format) => {
  const outs = results
    .map((result) =>
      result.status === 'fulfilled'
        ? result.value.stdout
        : result.reason.stdout,
    )
    .filter((out) => out)
    .sort()
  if (format === 'json') {
    return \`[\${outs
      .map((out) => out.substring(1, out.length - 1))
      .filter((out) => out)
      .join(',')}]\`
  }
  return outs.join('\\\\n')
}

const getArgs: (args: string[]) => ParaLintArgs = (args) => {
  const {
    _: entries,
    h,
    help = h,
    v,
    version = v,
    ext: extension = defaultExtension,
    f = 'stylish',
    format = f,
    o,
    'output-file': outputFile = o,
    concurrency = cpusLength / 2,
    ...argv
  } = minimist(args)
  return {
    entries,
    help,
    version,
    extension,
    format,
    outputFile,
    concurrency,
    argv,
  }
}

const lint: (args: ParaLintArgs) => Promise<any> = async (args) => {
  const { format, outputFile, concurrency, argv } = args
  const files = await getFiles(args)
  const results = await getResults(
    files,
    Math.min(Math.max(1, concurrency | 0), cpusLength),
    { ...argv, format },
  )
  const formatted = getFormatted(results, format)
  if (outputFile) {
    await writeFile(outputFile, formatted)
  } else if (formatted) {
    console.log(formatted)
  }
  if (results.every(({ status }) => status === 'fulfilled')) {
    return Promise.resolve()
  }
  // eslint-disable-next-line prefer-promise-reject-errors
  return Promise.reject()
}

export const main: (argv: string[]) => Promise<any> = async (argv) => {
  const args = getArgs(argv)
  const { help, version, format } = args
  if (help || version) {
    const res = await spawn('eslint', dargs({ version, help }))
    console.log(res.stdout)
    return Promise.resolve()
  }
  if (!compatibleFormats.includes(format)) {
    console.error(\`format \${format} is not supported yet\`)
    // eslint-disable-next-line prefer-promise-reject-errors
    return Promise.reject()
  }
  return lint(args)
}
",
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
  Object {
    "errorCount": 0,
    "fatalErrorCount": 0,
    "filePath": "/src/test/ts/index.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": Array [],
    "suppressedMessages": Array [],
    "usedDeprecatedRules": Array [
      Object {
        "replacedBy": Array [
          "unicorn/no-instanceof-array",
        ],
        "ruleId": "unicorn/no-array-instanceof",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-dataset",
        ],
        "ruleId": "unicorn/prefer-dataset",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-keyboard-event-key",
        ],
        "ruleId": "unicorn/prefer-event-key",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-array-flat-map",
        ],
        "ruleId": "unicorn/prefer-flat-map",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-append",
        ],
        "ruleId": "unicorn/prefer-node-append",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-remove",
        ],
        "ruleId": "unicorn/prefer-node-remove",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-string-starts-ends-with",
        ],
        "ruleId": "unicorn/prefer-starts-ends-with",
      },
      Object {
        "replacedBy": Array [
          "unicorn/prefer-dom-node-text-content",
        ],
        "ruleId": "unicorn/prefer-text-content",
      },
    ],
    "warningCount": 0,
  },
]
`;

exports[`runs with -h 1`] = `
"eslint [options] file.js [file.js] [dir]

Basic configuration:
  --no-eslintrc                   Disable use of configuration from .eslintrc.*
  -c, --config path::String       Use this configuration, overriding .eslintrc.* config options if present
  --env [String]                  Specify environments
  --ext [String]                  Specify JavaScript file extensions
  --global [String]               Define global variables
  --parser String                 Specify the parser to be used
  --parser-options Object         Specify parser options
  --resolve-plugins-relative-to path::String  A folder where plugins should be resolved from, CWD by default

Specifying rules and plugins:
  --plugin [String]               Specify plugins
  --rule Object                   Specify rules
  --rulesdir [path::String]       Load additional rules from this directory. Deprecated: Use rules from plugins

Fixing problems:
  --fix                           Automatically fix problems
  --fix-dry-run                   Automatically fix problems without saving the changes to the file system
  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)

Ignoring files:
  --ignore-path path::String      Specify path of ignore file
  --no-ignore                     Disable use of ignore files and patterns
  --ignore-pattern [String]       Pattern of files to ignore (in addition to those in .eslintignore)

Using stdin:
  --stdin                         Lint code provided on <STDIN> - default: false
  --stdin-filename String         Specify filename to process STDIN as

Handling warnings:
  --quiet                         Report errors only - default: false
  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1

Output:
  -o, --output-file path::String  Specify file to write report to
  -f, --format String             Use a specific output format - default: stylish
  --color, --no-color             Force enabling/disabling of color

Inline configuration comments:
  --no-inline-config              Prevent comments from changing config or rules
  --report-unused-disable-directives  Adds reported errors for unused eslint-disable directives

Caching:
  --cache                         Only check changed files - default: false
  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache
  --cache-location path::String   Path to the cache file or directory
  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata

Miscellaneous:
  --init                          Run config initialization wizard - default: false
  --env-info                      Output execution environment information - default: false
  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched
  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false
  --debug                         Output debugging information
  -h, --help                      Show help
  -v, --version                   Output the version number
  --print-config path::String     Print the configuration for the given file"
`;

exports[`runs with -o eslint.txt 1`] = `
"[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m147:10[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m  [2m161:12[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m[0m
[0m[31m[1m✖ 2 problems (2 errors, 0 warnings)[22m[39m[0m
[0m[31m[1m[22m[39m[0m"
`;

exports[`runs with -v 1`] = `"v8.20.0"`;

exports[`runs with directory 1`] = `
"[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m147:10[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m  [2m161:12[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m[0m
[0m[31m[1m✖ 2 problems (2 errors, 0 warnings)[22m[39m[0m
[0m[31m[1m[22m[39m[0m"
`;

exports[`runs with directory and ext 1`] = `
"[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m147:10[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m  [2m161:12[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m[0m
[0m[31m[1m✖ 2 problems (2 errors, 0 warnings)[22m[39m[0m
[0m[31m[1m[22m[39m[0m"
`;

exports[`runs with file 1`] = `""`;

exports[`runs with pattern 1`] = `
"[0m[0m
[0m[4m/src/main/ts/index.ts[24m[0m
[0m  [2m147:10[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m  [2m161:12[22m  [31merror[39m  Expected the Promise rejection reason to be an Error  [2mprefer-promise-reject-errors[22m[0m
[0m[0m
[0m[31m[1m✖ 2 problems (2 errors, 0 warnings)[22m[39m[0m
[0m[31m[1m[22m[39m[0m"
`;
